#! /usr/bin/env node_modules/.bin/babel-node

import { join } from 'path';
import ygor from 'ygor';
import * as reader from '../lib/reader';
import { writeBuilder } from '../lib/writer';
import Builder from '../lib/builder';
import { validateBuilder } from '../lib/validator';
import { Package } from '../lib/models';

export async function buildData() {

  // directory where all the yaml files are stored
  const inputDir = ygor.cli.inputDir || 'data';

  // create a new content builder: this will stop duplicates content items
  // and ensure the data is composed correctly according to models we expect
  const builder = new Builder();

  // process packages.yaml: read file and add content items to the builder
  await reader.packages(builder, join(inputDir, 'packages.yaml'));

  // process articles.yaml: read file and add content items to the builder
  await reader.articles(builder, join(inputDir, 'articles.yaml'));

  // Turn on debugging output
  if (ygor.cli.dump) {
    const filter = typeof ygor.cli.dump === 'string' ? ygor.cli.dump.split(/[,\ ]+/) : null;
    Builder.dump(builder, filter);
  } else if (typeof ygor.cli.package === 'string') {
    builder.content.forEach(content => {
      if (!(content instanceof Package)) return;
      if (ygor.cli.package !== content.uuid) return;
      content.dumpContents();
    });
  }

  // validate all the content data
  validateBuilder(builder);

  return builder;
}

export async function writeData() {

  // local directory where all the json files should be saved
  const outputDir = ygor.cli.outputDir || '.tmp';

  // create the outputDir if not already present
  ygor.shell(`mkdir -p ${outputDir}`);

  // clean the outputDir directory
  ygor.shell(`rm -rf ${outputDir}/*`);

  if (ygor.cli.removeAll) {
    console.log(`Quiting with empty outputDir=${outputDir}`);
    return;
  }

  const builder = await buildData();
  const writtenFiles = await writeBuilder(builder, outputDir);

  // Output a list of all the files created
  console.log('\nWrite content:');
  console.log(writtenFiles.filter(Boolean).join('\n'));
}

function run(fn) {
  return async function() {
    try {
      await fn();
    } catch (e) {
      console.error(e.message);
      process.exit(1);
    }
  }
}

ygor.task('default', run(writeData))
    .task('write', run(writeData))
    .task('data', run(buildData));

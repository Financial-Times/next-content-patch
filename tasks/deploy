#! /usr/bin/env node_modules/.bin/babel-node

import { parse } from 'path';
import { readdir } from 'fs';
import ygor from 'ygor';
import { promisify } from 'bluebird';
import remove from '../lib/remove';
import { regingestContentAllRegions } from '../lib/es';
import { syncDirectory } from '../lib/s3';
import { task } from '../lib/utils';

const readdirAsync = promisify(readdir);

// Increase the socket pool size in the http and https global agents
// to improve bandwidth -- used for quicker uploads to S3.
require('http').globalAgent.maxSockets = require('https').globalAgent.maxSockets = 20;

export async function main() {
  const bucket = ygor.cli.bucket || 'rj-xcapi-mock';
  const bucketDirectory = ygor.cli.bucketDirectory || 'local';
  const concurrency = ygor.cli.concurrency || 10;

  // local directory where all the json files should be saved
  const dir = ygor.cli.dir || '.tmp';

  // Get a directory listing
  const ls = (await readdirAsync(dir)).map(parse);

  // A simple list of files to be uploaded
  const filenames = ls.map(({base}) => base);

  // A list if Content IDs for each file to be uploaded
  const uploadIds = ls.map(({name}) => name);

  if (!filenames.length) {
    if (!ygor.cli.removeAll) {
      throw new Error('Unsafe operation: Cannot sync an empty directory without --removeAll option.');
    } else {
      console.log(`
        # WARNING:
        - The --removeAll option is turned on and ...
        - Upload directory is empty so we're going to sync an empty directory.
        - The contents of s3://${bucket}/${bucketDirectory}/ will be deleted.
        - Nothing in ElasticSearch will be reingested
      `);
    }
  }

  // TODO: maybe hit all the IDs in elastic search and warn/fail is some are missing

  // Upload the files to s3
  await syncDirectory(dir, {bucket, bucketDirectory});

  if (ygor.cli.skipReingest) {
    console.log('Skipping reingestion');
    return;
  }

  // Remove unused files from s3
  const deletedIds = []; //await remove({filename: 'remove.yaml', dir: 'data', bucket, bucketDirectory});

  // Tell ES-interface to reingest everything
  const idsToReingest = uploadIds.concat(deletedIds);
  await regingestContentAllRegions(idsToReingest, concurrency);
}

ygor.task('default', task(main));
